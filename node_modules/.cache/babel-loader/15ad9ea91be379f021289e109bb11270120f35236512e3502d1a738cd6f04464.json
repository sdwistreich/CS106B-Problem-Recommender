{"ast":null,"code":"var _jsxFileName = \"/Users/suzannahwistreich/Desktop/Problem Reccomender/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport problems from './problems.json'; // Ensure you have this JSON file with problem data\nimport Banner from './Banner';\nimport Categories from './Categories';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [topics, setTopics] = useState([{\n    id: 'cpp',\n    name: 'Programming in C++',\n    rank: 0\n  }, {\n    id: 'adt',\n    name: 'ADTs',\n    rank: 0\n  }, {\n    id: 'recursion',\n    name: 'Recursion',\n    rank: 0\n  }, {\n    id: 'backtracking',\n    name: 'Backtracking',\n    rank: 0\n  }, {\n    id: 'classes',\n    name: 'Classes',\n    rank: 0\n  }, {\n    id: 'linkedLists',\n    name: 'Linked Lists',\n    rank: 0\n  }, {\n    id: 'trees',\n    name: 'Trees',\n    rank: 0\n  }]);\n  const [recommendedProblems, setRecommendedProblems] = useState([]);\n  const handleRankChange = newTopics => {\n    if (Array.isArray(newTopics)) {\n      setTopics(newTopics.map((topic, index) => ({\n        ...topic,\n        rank: index + 1\n      }))); // Auto-update rank based on array order\n    }\n  };\n  const handleSubmit = () => {\n    const sortedTopics = [...topics].sort((a, b) => a.rank - b.rank).slice(0, 3);\n    fetchProblems(sortedTopics.map(topic => topic.name));\n    console.log(\"Current Rankings:\", topics);\n    console.log(\"Top Three Topics:\", sortedTopics);\n    alert('Rankings submitted!');\n  };\n  const fetchProblems = topThreeTopics => {\n    const filteredProblems = problems.filter(problem => topThreeTopics.includes(problem.topic));\n    setRecommendedProblems(filteredProblems);\n    console.log(\"Recommended Problems:\", filteredProblems);\n  };\n  const computePosteriorProbabilities = (problem, rank) => {\n    // Define a likelihood based on the rank. This could be more complex depending on your assessment.\n    // For simplicity, we are inversely scaling with rank; lower ranks mean higher importance.\n    const likelihood = 1 / rank + 1; // Simplified likelihood\n    const posteriorProbability = problem.prior_probability * likelihood; // Basic Bayesian update\n    return posteriorProbability;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Categories, {\n      topics: topics,\n      onRankChange: handleRankChange,\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), recommendedProblems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recommended Problems:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recommendedProblems.map((problem, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: problem.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UyDFInpKUnSg11QUnqCUenRQ8ic=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","problems","Banner","Categories","jsxDEV","_jsxDEV","App","_s","topics","setTopics","id","name","rank","recommendedProblems","setRecommendedProblems","handleRankChange","newTopics","Array","isArray","map","topic","index","handleSubmit","sortedTopics","sort","a","b","slice","fetchProblems","console","log","alert","topThreeTopics","filteredProblems","filter","problem","includes","computePosteriorProbabilities","likelihood","posteriorProbability","prior_probability","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRankChange","onSubmit","length","_c","$RefreshReg$"],"sources":["/Users/suzannahwistreich/Desktop/Problem Reccomender/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport problems from './problems.json';  // Ensure you have this JSON file with problem data\nimport Banner from './Banner';\nimport Categories from './Categories';\n\nfunction App() {\n  const [topics, setTopics] = useState([\n    { id: 'cpp', name: 'Programming in C++', rank: 0 },\n    { id: 'adt', name: 'ADTs', rank: 0 },\n    { id: 'recursion', name: 'Recursion', rank: 0 },\n    { id: 'backtracking', name: 'Backtracking', rank: 0 },\n    { id: 'classes', name: 'Classes', rank: 0 },\n    { id: 'linkedLists', name: 'Linked Lists', rank: 0 },\n    { id: 'trees', name: 'Trees', rank: 0 }\n  ]);\n  const [recommendedProblems, setRecommendedProblems] = useState([]);\n\n  const handleRankChange = (newTopics) => {\n    if (Array.isArray(newTopics)) {\n      setTopics(newTopics.map((topic, index) => ({ ...topic, rank: index + 1 }))); // Auto-update rank based on array order\n    }\n  };\n\n  const handleSubmit = () => {\n    const sortedTopics = [...topics].sort((a, b) => a.rank - b.rank).slice(0, 3);\n    fetchProblems(sortedTopics.map(topic => topic.name));\n    console.log(\"Current Rankings:\", topics);\n    console.log(\"Top Three Topics:\", sortedTopics);\n    alert('Rankings submitted!');\n  };\n\n  const fetchProblems = (topThreeTopics) => {\n    const filteredProblems = problems.filter(problem =>\n      topThreeTopics.includes(problem.topic)\n    );\n    setRecommendedProblems(filteredProblems);\n    console.log(\"Recommended Problems:\", filteredProblems);\n  };\n\n  const computePosteriorProbabilities = (problem, rank) => {\n    // Define a likelihood based on the rank. This could be more complex depending on your assessment.\n    // For simplicity, we are inversely scaling with rank; lower ranks mean higher importance.\n    const likelihood = 1 / rank + 1;  // Simplified likelihood\n    const posteriorProbability = problem.prior_probability * likelihood; // Basic Bayesian update\n    return posteriorProbability;\n  };\n  \n\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Categories topics={topics} onRankChange={handleRankChange} onSubmit={handleSubmit} />\n      {recommendedProblems.length > 0 && (\n        <div>\n          <h2>Recommended Problems:</h2>\n          <ul>\n            {recommendedProblems.map((problem, index) => (\n              <li key={index}>{problem.name}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}