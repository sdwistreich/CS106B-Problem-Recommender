{"ast":null,"code":"var _jsxFileName = \"/Users/suzannahwistreich/Desktop/Problem Reccomender/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport problems from './problems.json';\nimport Categories from './Categories';\nimport Modal from 'react-modal';\nimport './Banner.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nfunction App() {\n  _s();\n  const [topics, setTopics] = useState([{\n    id: 'cpp',\n    name: 'Programming in C++ and Big-O',\n    rank: 1,\n    dirichletCount: 1\n  }, {\n    id: 'adt',\n    name: 'ADTs',\n    rank: 2,\n    dirichletCount: 1\n  }, {\n    id: 'recursion',\n    name: 'Recursion',\n    rank: 3,\n    dirichletCount: 4\n  }, {\n    id: 'backtracking',\n    name: 'Backtracking',\n    rank: 4,\n    dirichletCount: 6\n  }, {\n    id: 'classes',\n    name: 'Classes',\n    rank: 5,\n    dirichletCount: 1\n  }, {\n    id: 'linkedLists',\n    name: 'Linked Lists',\n    rank: 6,\n    dirichletCount: 2\n  }, {\n    id: 'trees',\n    name: 'Trees',\n    rank: 7,\n    dirichletCount: 2\n  }]);\n  const [recommendedProblems, setRecommendedProblems] = useState([]);\n  const [completedProblems, setCompletedProblems] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentProblem, setCurrentProblem] = useState(null);\n  const [feedback, setFeedback] = useState(3); // Default feedback is 3\n\n  const handleRankChange = newTopics => {\n    setTopics(newTopics.map((topic, index) => ({\n      ...topic,\n      rank: index + 1\n    })));\n  };\n  const handleSubmit = () => {\n    const updatedTopics = topics.map(topic => ({\n      ...topic,\n      dirichletCount: topic.dirichletCount + (8 - topic.rank)\n    }));\n\n    // Fetch problems based on these updated counts\n    fetchProblems(updatedTopics);\n    console.log(\"Updated Dirichlet counts and MAP calculations:\", updatedTopics);\n    alert('Rankings submitted!');\n  };\n  const recommendNewProblems = () => {\n    fetchProblems(topics); // Use existing topics state directly\n  };\n  const fetchProblems = updatedTopics => {\n    const m = updatedTopics.length;\n    const totalDirichletCounts = updatedTopics.reduce((acc, cur) => acc + cur.dirichletCount, 0);\n\n    // Create a new array to sort topics by MAP without altering the original state\n    const topicsWithCalculatedMAP = updatedTopics.map(topic => ({\n      ...topic,\n      MAP: MAP(topic.dirichletCount, totalDirichletCounts, m)\n    }));\n\n    // Now sort this array to decide which topics have the highest MAP values\n    const sortedTopics = topicsWithCalculatedMAP.sort((a, b) => b.MAP - a.MAP).slice(0, 3);\n\n    // Select one random problem from each of the top three topics\n    let selectedProblems = sortedTopics.map(topic => {\n      const topicProblems = problems.filter(problem => problem.topic === topic.name && !completedProblems.includes(problem.name));\n      return topicProblems[Math.floor(Math.random() * topicProblems.length)];\n    }).filter(problem => problem); // Ensure undefined values are removed in case of empty filters\n\n    setRecommendedProblems(selectedProblems);\n    console.log(\"Top 3 Recommended Problems based on MAP:\", selectedProblems.map(entry => ({\n      name: entry.problem.name,\n      topic: entry.problem.topic,\n      MAP: entry.MAP\n    })));\n  };\n  const MAP = (dirichletCount, totalDirichletCounts, m) => {\n    return (dirichletCount - 1) / (totalDirichletCounts - m);\n  };\n  const markAsCompleted = (problemName, topic) => {\n    setCurrentProblem({\n      problemName,\n      topic\n    });\n    setModalIsOpen(true);\n  };\n  const handleFeedbackSubmit = () => {\n    // Update all topics' Dirichlet counts based on the feedback\n    const feedbackRank = parseInt(feedback);\n    setTopics(prevTopics => prevTopics.map(topic => ({\n      ...topic,\n      dirichletCount: topic.id === currentProblem.id ? topic.dirichletCount + feedbackRank : topic.dirichletCount + (5 - feedbackRank)\n    })));\n    setCompletedProblems([...completedProblems, currentProblem.problemName]);\n    console.log(`User feedback for ${currentProblem.topic}: ${feedback}`);\n    setModalIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"CS106B Practice Problem Recommender\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Welcome! Please rank your preferences on what to study:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: recommendNewProblems,\n          children: \"Recommend New Problems\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftColumn\",\n        children: /*#__PURE__*/_jsxDEV(Categories, {\n          topics: topics,\n          onRankChange: handleRankChange,\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightColumn\",\n        children: recommendedProblems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Recommended Problems:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: recommendedProblems.map((problem, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [index + 1, \") \", problem.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 24\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Topic: \", problem.topic]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: problem.link,\n                  target: \"_blank\",\n                  rel: \"noopener noreferrer\",\n                  children: [\"Link to \", problem.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => markAsCompleted(problem.name, problem.topic),\n                style: {\n                  backgroundColor: completedProblems.includes(problem.name) ? 'green' : 'initial'\n                },\n                children: \"Mark as Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: () => setModalIsOpen(false),\n      contentLabel: \"Feedback Modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Good Work on \", currentProblem === null || currentProblem === void 0 ? void 0 : currentProblem.topic, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"On a scale of 1-5, how much more practice on \", currentProblem === null || currentProblem === void 0 ? void 0 : currentProblem.topic, \" would you like?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [1, 2, 3, 4, 5].map(value => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: value,\n            checked: feedback === value,\n            onChange: () => setFeedback(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this), value]\n        }, value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFeedbackSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"yIwQIlUONrdvGzrj5cdUB7gbIAw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","problems","Categories","Modal","jsxDEV","_jsxDEV","setAppElement","App","_s","topics","setTopics","id","name","rank","dirichletCount","recommendedProblems","setRecommendedProblems","completedProblems","setCompletedProblems","modalIsOpen","setModalIsOpen","currentProblem","setCurrentProblem","feedback","setFeedback","handleRankChange","newTopics","map","topic","index","handleSubmit","updatedTopics","fetchProblems","console","log","alert","recommendNewProblems","m","length","totalDirichletCounts","reduce","acc","cur","topicsWithCalculatedMAP","MAP","sortedTopics","sort","a","b","slice","selectedProblems","topicProblems","filter","problem","includes","Math","floor","random","entry","markAsCompleted","problemName","handleFeedbackSubmit","feedbackRank","parseInt","prevTopics","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onRankChange","onSubmit","href","link","target","rel","style","backgroundColor","isOpen","onRequestClose","contentLabel","value","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/suzannahwistreich/Desktop/Problem Reccomender/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport problems from './problems.json';\nimport Categories from './Categories';\nimport Modal from 'react-modal';\nimport './Banner.css';\n\nModal.setAppElement('#root');\n\nfunction App() {\n  const [topics, setTopics] = useState([\n    { id: 'cpp', name: 'Programming in C++ and Big-O', rank: 1, dirichletCount: 1 },\n    { id: 'adt', name: 'ADTs', rank: 2, dirichletCount: 1 },\n    { id: 'recursion', name: 'Recursion', rank: 3, dirichletCount: 4 },\n    { id: 'backtracking', name: 'Backtracking', rank: 4, dirichletCount: 6 },\n    { id: 'classes', name: 'Classes', rank: 5, dirichletCount: 1 },\n    { id: 'linkedLists', name: 'Linked Lists', rank: 6, dirichletCount: 2 },\n    { id: 'trees', name: 'Trees', rank: 7, dirichletCount: 2 }\n  ]);\n  const [recommendedProblems, setRecommendedProblems] = useState([]);\n  const [completedProblems, setCompletedProblems] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentProblem, setCurrentProblem] = useState(null);\n  const [feedback, setFeedback] = useState(3);  // Default feedback is 3\n\n  const handleRankChange = (newTopics) => {\n    setTopics(newTopics.map((topic, index) => ({ ...topic, rank: index + 1 })));\n  };\n\n  const handleSubmit = () => {\n    const updatedTopics = topics.map(topic => ({\n      ...topic,\n      dirichletCount: topic.dirichletCount + (8 - topic.rank)\n    }));\n  \n    // Fetch problems based on these updated counts\n    fetchProblems(updatedTopics);\n    console.log(\"Updated Dirichlet counts and MAP calculations:\", updatedTopics);\n    alert('Rankings submitted!');\n  };\n  \n  const recommendNewProblems = () => {\n    fetchProblems(topics);  // Use existing topics state directly\n  };\n\n  const fetchProblems = (updatedTopics) => {\n    const m = updatedTopics.length;\n    const totalDirichletCounts = updatedTopics.reduce((acc, cur) => acc + cur.dirichletCount, 0);\n\n    // Create a new array to sort topics by MAP without altering the original state\n    const topicsWithCalculatedMAP = updatedTopics.map(topic => ({\n        ...topic,\n        MAP: MAP(topic.dirichletCount, totalDirichletCounts, m)\n    }));\n\n    // Now sort this array to decide which topics have the highest MAP values\n    const sortedTopics = topicsWithCalculatedMAP.sort((a, b) => b.MAP - a.MAP).slice(0, 3);\n\n    // Select one random problem from each of the top three topics\n    let selectedProblems = sortedTopics.map(topic => {\n        const topicProblems = problems.filter(problem => problem.topic === topic.name && !completedProblems.includes(problem.name));\n        return topicProblems[Math.floor(Math.random() * topicProblems.length)];\n    }).filter(problem => problem);  // Ensure undefined values are removed in case of empty filters\n\n    setRecommendedProblems(selectedProblems);\n    console.log(\"Top 3 Recommended Problems based on MAP:\", selectedProblems.map(entry => ({\n      name: entry.problem.name,\n      topic: entry.problem.topic,\n      MAP: entry.MAP\n  })));\n};\n  \n  \n\n  const MAP = (dirichletCount, totalDirichletCounts, m) => {\n    return (dirichletCount - 1) / (totalDirichletCounts - m);\n  };\n  \n\n  const markAsCompleted = (problemName, topic) => {\n    setCurrentProblem({ problemName, topic });\n    setModalIsOpen(true);\n  };\n\n  const handleFeedbackSubmit = () => {\n    // Update all topics' Dirichlet counts based on the feedback\n    const feedbackRank = parseInt(feedback);\n    setTopics(prevTopics => prevTopics.map(topic => ({\n      ...topic,\n      dirichletCount: topic.id === currentProblem.id ? topic.dirichletCount + feedbackRank : topic.dirichletCount + (5 - feedbackRank)\n    })));\n\n    setCompletedProblems([...completedProblems, currentProblem.problemName]);\n    console.log(`User feedback for ${currentProblem.topic}: ${feedback}`);\n    setModalIsOpen(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"banner-container\">\n        <div className=\"banner-content\">\n          <h1>CS106B Practice Problem Recommender</h1>\n          <p>Welcome! Please rank your preferences on what to study:</p>\n          <button onClick={recommendNewProblems}>Recommend New Problems</button>\n        ...\n        </div>\n      </div>\n      <div className=\"main-container\">\n        <div className=\"leftColumn\">\n          <Categories topics={topics} onRankChange={handleRankChange} onSubmit={handleSubmit} />\n        </div>\n        <div className=\"rightColumn\">\n          {recommendedProblems.length > 0 && (\n            <div>\n              <h2>Recommended Problems:</h2>\n              <ul>\n                {recommendedProblems.map((problem, index) => (\n                  <li key={index}>\n                    <p><strong>{index + 1}) {problem.name}</strong></p>\n                    <p>Topic: {problem.topic}</p>\n                    <p>\n                      <a href={problem.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                        Link to {problem.name}\n                      </a>\n                    </p>\n                    <button\n                      onClick={() => markAsCompleted(problem.name, problem.topic)}\n                      style={{ backgroundColor: completedProblems.includes(problem.name) ? 'green' : 'initial' }}\n                    >\n                      Mark as Completed\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      </div>\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={() => setModalIsOpen(false)}\n        contentLabel=\"Feedback Modal\"\n      >\n        <h2>Good Work on {currentProblem?.topic}!</h2>\n        <p>On a scale of 1-5, how much more practice on {currentProblem?.topic} would you like?</p>\n        <div>\n          {[1, 2, 3, 4, 5].map(value => (\n            <label key={value}>\n              <input\n                type=\"radio\"\n                value={value}\n                checked={feedback === value}\n                onChange={() => setFeedback(value)}\n              />\n              {value}\n            </label>\n          ))}\n        </div>\n        <button onClick={handleFeedbackSubmit}>Submit</button>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}